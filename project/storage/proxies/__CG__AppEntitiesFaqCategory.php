<?php

namespace DoctrineProxies\__CG__\App\Entities\Faq;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \App\Entities\Faq\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'questions', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'lockalias', 'title', 'seoTitle', 'seoDescription', 'seoKeywords', 'text', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'position'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'questions', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'lockalias', 'title', 'seoTitle', 'seoDescription', 'seoKeywords', 'text', '' . "\0" . 'App\\Entities\\Faq\\Category' . "\0" . 'position'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function setSeoDescription($seoDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeoDescription', [$seoDescription]);

        return parent::setSeoDescription($seoDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeoDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeoDescription', []);

        return parent::getSeoDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeoKeywords($seoKeywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeoKeywords', [$seoKeywords]);

        return parent::setSeoKeywords($seoKeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeoKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeoKeywords', []);

        return parent::getSeoKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeoTitle($seoTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeoTitle', [$seoTitle]);

        return parent::setSeoTitle($seoTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeoTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeoTitle', []);

        return parent::getSeoTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText', []);

        return parent::getText();
    }

    /**
     * {@inheritDoc}
     */
    public function setText($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText', [$text]);

        return parent::setText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function hasQuestion(\App\Entities\Faq\QuestionInterface $question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasQuestion', [$question]);

        return parent::hasQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function countQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countQuestions', []);

        return parent::countQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasQuestions', []);

        return parent::hasQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasActiveQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasActiveQuestions', []);

        return parent::hasActiveQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', [$position]);

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', []);

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestions', []);

        return parent::getQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function addQuestion(\App\Entities\Faq\QuestionInterface $question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addQuestion', [$question]);

        return parent::addQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentity()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdentity();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentity', []);

        return parent::getIdentity();
    }

    /**
     * {@inheritDoc}
     */
    public function removeQuestion(\App\Entities\Faq\QuestionInterface $question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeQuestion', [$question]);

        return parent::removeQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlias', []);

        return parent::getAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlias($alias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlias', [$alias]);

        return parent::setAlias($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function getFavoriteQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFavoriteQuestions', []);

        return parent::getFavoriteQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasFavoriteQuestions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasFavoriteQuestions', []);

        return parent::hasFavoriteQuestions();
    }

    /**
     * {@inheritDoc}
     */
    public function isEqual($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEqual', [$category]);

        return parent::isEqual($category);
    }

    /**
     * {@inheritDoc}
     */
    public function isLockAlias(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLockAlias', []);

        return parent::isLockAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setLockAlias(bool $lock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLockAlias', [$lock]);

        return parent::setLockAlias($lock);
    }

}
