<?php

namespace DoctrineProxies\__CG__\App\Entities\Blog;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \App\Entities\Blog\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'lockAlias', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'ord', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'state', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'name', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'items'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'lockAlias', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'ord', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'state', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'name', '' . "\0" . 'App\\Entities\\Blog\\Category' . "\0" . 'items'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlias', []);

        return parent::getAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlias($alias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlias', [$alias]);

        return parent::setAlias($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function getItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItems', []);

        return parent::getItems();
    }

    /**
     * {@inheritDoc}
     */
    public function addItem(\App\Entities\Blog\ItemInterface $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addItem', [$item]);

        return parent::addItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function hasItem(\App\Entities\Blog\ItemInterface $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasItem', [$item]);

        return parent::hasItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function countItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countItems', []);

        return parent::countItems();
    }

    /**
     * {@inheritDoc}
     */
    public function hasItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasItems', []);

        return parent::hasItems();
    }

    /**
     * {@inheritDoc}
     */
    public function hasActiveItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasActiveItems', []);

        return parent::hasActiveItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentity()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdentity();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentity', []);

        return parent::getIdentity();
    }

    /**
     * {@inheritDoc}
     */
    public function removeItem(\App\Entities\Blog\ItemInterface $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeItem', [$item]);

        return parent::removeItem($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getLockAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLockAlias', []);

        return parent::getLockAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setLockAlias($lockAlias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLockAlias', [$lockAlias]);

        return parent::setLockAlias($lockAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrd', []);

        return parent::getOrd();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrd($ord)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrd', [$ord]);

        return parent::setOrd($ord);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function isEqual($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEqual', [$category]);

        return parent::isEqual($category);
    }

}
