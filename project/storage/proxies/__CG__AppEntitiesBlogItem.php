<?php

namespace DoctrineProxies\__CG__\App\Entities\Blog;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Item extends \App\Entities\Blog\Item implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'lockAlias', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'publicFrom', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'publicTo', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'createdDate', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'createdBy', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'state', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'name', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'anons', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'text', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'category'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'identity', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'alias', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'lockAlias', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'publicFrom', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'publicTo', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'createdDate', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'createdBy', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'state', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'name', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'anons', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'text', '' . "\0" . 'App\\Entities\\Blog\\Item' . "\0" . 'category'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Item $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlias', []);

        return parent::getAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlias($alias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlias', [$alias]);

        return parent::setAlias($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnons()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnons', []);

        return parent::getAnons();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnons($anons)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnons', [$anons]);

        return parent::setAnons($anons);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', []);

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate(\DateTime $createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', [$createdDate]);

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentity()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdentity();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentity', []);

        return parent::getIdentity();
    }

    /**
     * {@inheritDoc}
     */
    public function getLockAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLockAlias', []);

        return parent::getLockAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setLockAlias($lockAlias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLockAlias', [$lockAlias]);

        return parent::setLockAlias($lockAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicFrom', []);

        return parent::getPublicFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicFrom(\DateTime $publicFrom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicFrom', [$publicFrom]);

        return parent::setPublicFrom($publicFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicTo', []);

        return parent::getPublicTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicTo(\DateTime $publicTo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicTo', [$publicTo]);

        return parent::setPublicTo($publicTo);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText', []);

        return parent::getText();
    }

    /**
     * {@inheritDoc}
     */
    public function setText($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText', [$text]);

        return parent::setText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\App\Entities\Blog\CategoryInterface $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

}
